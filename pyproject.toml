[project]
name = "f3dasm"
version = "2.0.2"
description = "f3dasm - Framework for Data-driven Development and Analysis of Structures and Materials"
readme = "README.md"
authors = [
    {name = "M.P. van der Schelling", email = "m.p.vanderschelling@tudelft.nl"}
]
maintainers = [
    {name = "M.P. van der Schelling", email = "m.p.vanderschelling@tudelft.nl"}
]
classifiers = [

]

license = {text = "BSD-3-Clause"}
dependencies = [
    "autograd>=1.7.0",
    "filelock>=3.16.1",
    "hydra-core>=1.3.2",
    "matplotlib>=3.7.5",
    "numpy>=1.24.4",
    "pandas>=2.0.3",
    "pathos>=0.3.4",
    "salib>=1.4.8",
    "scipy>=1.10.1",
    "xarray>=2023.1.0",
]

requires-python = ">=3.9"


[tool.ruff]
line-length = 79


[tool.ruff.lint]
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # Pyflakes
    "I",   # isort
    "B",   # flake8-bugbear
    "UP",  # pyupgrade
]
ignore = [
    "E226",
    "E3",
    "E731",
    "C901",
    "UP045",
    "B027",
    "B012",
]

exclude = [
    "__pycache__",
    "dist",
	"*.egg",
	"docs/source",
	"tests",
	".git",
	"experiments/*",
	"notebooks",
	"tests/*",
    "studies/*",
    "docs/*",
]

[tool.uv]
package = true

[tools.setuptools]
packages = ["src"]

[dependency-groups]
all = [
    "optuna>=4.4.0",
]
dev = [
    "build>=1.2.2.post1",
    "hypothesis>=6.113.0",
    "ipykernel>=6.29.5",
    "ipywidgets>=8.1.7",
    "nbsphinx>=0.9.7",
    "optuna>=4.4.0",
    "pytest>=8.3.5",
    "pytest-cov>=5.0.0",
    "setuptools>=75.3.2",
    "sphinx>=7.1.2",
    "sphinx-autodoc-typehints>=2.0.1",
    "sphinx-book-theme>=0.0.39",
    "sphinx-tabs==3.4.4",
    "sphinxcontrib-bibtex>=2.5.0",
    "wheel>=0.45.1",
]

[tool.pytest.ini_options]
pythonpath = [".", "src"]
addopts = "--cov-report term --cov-report html --cov-config=.coveragerc --cov=f3dasm --cov-fail-under=70.00"
minversion = "6.0"
testpaths = [
    "tests",
]
markers = [
    "smoke",
    "requires_dependency(name): mark the test as it requires a certain dependency",
]

[build-system]
requires = ["setuptools>=43.0.0", "wheel"]
build-backend = "setuptools.build_meta"

[tool.coverage.run]
branch = true
source = ["src"]
omit = [
    "tests/",
    "**/__init__.py",
]

[tool.coverage.report]
# Regexes for lines to exclude from consideration
exclude_lines = [
    # Have to re-enable the standard pragma
    "pragma: no cover",

    # Don't complain about missing debug-only code:
    "def __repr__",
    "if self.debug",

    # Don't complain if tests don't hit defensive assertion code:
    "raise AssertionError",
    "raise NotImplementedError",

    # TYPE_CHECKING is used for type hinting, don't complain about it:
    "if TYPE_CHECKING:",

    # Don't complain if non-runnable code isn't run:
    "if 0:",
    "if __name__ == .__main__.:",

    # Don't complain about abstract methods, they aren't run:
    "@(abc\\.)?abstractmethod",
]

[tool.coverage.html]
directory = "coverage_html_report"
